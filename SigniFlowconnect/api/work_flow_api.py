"""
    SigniFlow OpenAPI Spec v1

    ## SigniFlow API used to automate esignature workflow creation and management.   # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@signiflow.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from SigniFlowconnect.api_client import ApiClient, Endpoint as _Endpoint
from SigniFlowconnect.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from SigniFlowconnect.model.add_wokflow_step_v2_response import AddWokflowStepV2Response
from SigniFlowconnect.model.add_workflow_step_v2_request import AddWorkflowStepV2Request
from SigniFlowconnect.model.cancel_flow_request import CancelFlowRequest
from SigniFlowconnect.model.cancel_flow_response import CancelFlowResponse
from SigniFlowconnect.model.create_workflow_request import CreateWorkflowRequest
from SigniFlowconnect.model.create_workflow_response import CreateWorkflowResponse
from SigniFlowconnect.model.delete_doc_request import DeleteDocRequest
from SigniFlowconnect.model.delete_doc_response import DeleteDocResponse
from SigniFlowconnect.model.doc_prepper_add_advanced_fields_request import DocPrepperAddAdvancedFieldsRequest
from SigniFlowconnect.model.doc_prepper_add_advanced_fields_response import DocPrepperAddAdvancedFieldsResponse
from SigniFlowconnect.model.doc_prepper_add_fields_flow_id_request import DocPrepperAddFieldsFlowIDRequest
from SigniFlowconnect.model.doc_prepper_add_fields_flow_id_response import DocPrepperAddFieldsFlowIDResponse
from SigniFlowconnect.model.full_workflow_request import FullWorkflowRequest
from SigniFlowconnect.model.full_workflow_response import FullWorkflowResponse
from SigniFlowconnect.model.get_doc_status_request import GetDocStatusRequest
from SigniFlowconnect.model.get_doc_status_response import GetDocStatusResponse
from SigniFlowconnect.model.get_document_request import GetDocumentRequest
from SigniFlowconnect.model.get_document_response import GetDocumentResponse
from SigniFlowconnect.model.initiate_flow_no_email_request import InitiateFlowNoEmailRequest
from SigniFlowconnect.model.initiate_flow_no_email_response import InitiateFlowNoEmailResponse
from SigniFlowconnect.model.initiate_flow_no_initial_email_request import InitiateFlowNoInitialEmailRequest
from SigniFlowconnect.model.initiate_flow_no_initial_email_response import InitiateFlowNoInitialEmailResponse
from SigniFlowconnect.model.initiate_flow_request import InitiateFlowRequest
from SigniFlowconnect.model.initiate_flow_response import InitiateFlowResponse
from SigniFlowconnect.model.workflow_sign_request import WorkflowSignRequest
from SigniFlowconnect.model.workflow_sign_response import WorkflowSignResponse


class WorkFlowApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_workflow(
            self,
            create_workflow_request,
            content_type="application/json",
            **kwargs
        ):
            """Create Workflow  # noqa: E501

            #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_workflow(create_workflow_request, content_type="application/json", async_req=True)
            >>> result = thread.get()

            Args:
                create_workflow_request (CreateWorkflowRequest): ##### Create Workflow Request Model
                content_type (str): defaults to "application/json", must be one of ["application/json"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CreateWorkflowResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            kwargs['create_workflow_request'] = \
                create_workflow_request
            return self.call_with_http_info(**kwargs)

        self.create_workflow = _Endpoint(
            settings={
                'response_type': (CreateWorkflowResponse,),
                'auth': [],
                'endpoint_path': '/CreateWorkflow',
                'operation_id': 'create_workflow',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'create_workflow_request',
                ],
                'required': [
                    'content_type',
                    'create_workflow_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'create_workflow_request':
                        (CreateWorkflowRequest,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'create_workflow_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_workflow
        )

        def __get_document(
            self,
            content_type="application/json",
            **kwargs
        ):
            """Get Document  # noqa: E501

            #### Used to download a document from SigniFlow.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_document(content_type="application/json", async_req=True)
            >>> result = thread.get()

            Args:
                content_type (str): defaults to "application/json", must be one of ["application/json"]

            Keyword Args:
                get_document_request (GetDocumentRequest): ##### Get Document Request Model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GetDocumentResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.get_document = _Endpoint(
            settings={
                'response_type': (GetDocumentResponse,),
                'auth': [],
                'endpoint_path': '/GetDoc',
                'operation_id': 'get_document',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'get_document_request',
                ],
                'required': [
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'get_document_request':
                        (GetDocumentRequest,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'get_document_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__get_document
        )

        def __post_add_workflow_step(
            self,
            content_type="application/json",
            **kwargs
        ):
            """Add a Workflow step  # noqa: E501

            #### Used to add a step to a document Workflow process.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_add_workflow_step(content_type="application/json", async_req=True)
            >>> result = thread.get()

            Args:
                content_type (str): defaults to "application/json", must be one of ["application/json"]

            Keyword Args:
                add_workflow_step_v2_request (AddWorkflowStepV2Request): ##### Add A Workflow Step Request Model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AddWokflowStepV2Response
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.post_add_workflow_step = _Endpoint(
            settings={
                'response_type': (AddWokflowStepV2Response,),
                'auth': [],
                'endpoint_path': '/AddWorkflowStepV2',
                'operation_id': 'post_add_workflow_step',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'add_workflow_step_v2_request',
                ],
                'required': [
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'add_workflow_step_v2_request':
                        (AddWorkflowStepV2Request,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'add_workflow_step_v2_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_add_workflow_step
        )

        def __post_cancel_flow(
            self,
            content_type="application/json",
            **kwargs
        ):
            """Cancel Flow  # noqa: E501

            #### Used to cancel a document workflow.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_cancel_flow(content_type="application/json", async_req=True)
            >>> result = thread.get()

            Args:
                content_type (str): defaults to "application/json", must be one of ["application/json"]

            Keyword Args:
                cancel_flow_request (CancelFlowRequest): ##### Cancel Flow Request Model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CancelFlowResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.post_cancel_flow = _Endpoint(
            settings={
                'response_type': (CancelFlowResponse,),
                'auth': [],
                'endpoint_path': '/CancelFlow',
                'operation_id': 'post_cancel_flow',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'cancel_flow_request',
                ],
                'required': [
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'cancel_flow_request':
                        (CancelFlowRequest,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'cancel_flow_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_cancel_flow
        )

        def __post_delete_doc(
            self,
            content_type="application/json",
            **kwargs
        ):
            """Delete Document  # noqa: E501

            #### This is used to delete a document.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_delete_doc(content_type="application/json", async_req=True)
            >>> result = thread.get()

            Args:
                content_type (str): defaults to "application/json", must be one of ["application/json"]

            Keyword Args:
                delete_doc_request (DeleteDocRequest): ##### Delete Document Request Model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeleteDocResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.post_delete_doc = _Endpoint(
            settings={
                'response_type': (DeleteDocResponse,),
                'auth': [],
                'endpoint_path': '/DeleteDoc',
                'operation_id': 'post_delete_doc',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'delete_doc_request',
                ],
                'required': [
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'delete_doc_request':
                        (DeleteDocRequest,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'delete_doc_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_delete_doc
        )

        def __post_doc_prepper_add_field(
            self,
            content_type="application/json",
            **kwargs
        ):
            """Document Prepper Add Fields  # noqa: E501

            #### Used to add fields to a document using the user's FlowID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_doc_prepper_add_field(content_type="application/json", async_req=True)
            >>> result = thread.get()

            Args:
                content_type (str): defaults to "application/json", must be one of ["application/json"]

            Keyword Args:
                doc_prepper_add_fields_flow_id_request (DocPrepperAddFieldsFlowIDRequest): ##### Document Prepper Add Fields Request Model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocPrepperAddFieldsFlowIDResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.post_doc_prepper_add_field = _Endpoint(
            settings={
                'response_type': (DocPrepperAddFieldsFlowIDResponse,),
                'auth': [],
                'endpoint_path': '/DocPrepperAddFieldsFlowID',
                'operation_id': 'post_doc_prepper_add_field',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'doc_prepper_add_fields_flow_id_request',
                ],
                'required': [
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'doc_prepper_add_fields_flow_id_request':
                        (DocPrepperAddFieldsFlowIDRequest,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'doc_prepper_add_fields_flow_id_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_doc_prepper_add_field
        )

        def __post_doc_prepper_advanced_fields(
            self,
            content_type="application/json",
            **kwargs
        ):
            """Document Prepper Add Advanced Fields  # noqa: E501

            #### Used to add advanced fields to a document.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_doc_prepper_advanced_fields(content_type="application/json", async_req=True)
            >>> result = thread.get()

            Args:
                content_type (str): defaults to "application/json", must be one of ["application/json"]

            Keyword Args:
                doc_prepper_add_advanced_fields_request (DocPrepperAddAdvancedFieldsRequest): ##### Document Prepper Add Advanced Fields Request Model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocPrepperAddAdvancedFieldsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.post_doc_prepper_advanced_fields = _Endpoint(
            settings={
                'response_type': (DocPrepperAddAdvancedFieldsResponse,),
                'auth': [],
                'endpoint_path': '/DocPrepperAdvancedFields',
                'operation_id': 'post_doc_prepper_advanced_fields',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'doc_prepper_add_advanced_fields_request',
                ],
                'required': [
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'doc_prepper_add_advanced_fields_request':
                        (DocPrepperAddAdvancedFieldsRequest,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'doc_prepper_add_advanced_fields_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_doc_prepper_advanced_fields
        )

        def __post_full_workflow(
            self,
            content_type="application/json",
            **kwargs
        ):
            """FullWorkflow  # noqa: E501

            #### Used to create a fullworkflow for a document.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_full_workflow(content_type="application/json", async_req=True)
            >>> result = thread.get()

            Args:
                content_type (str): defaults to "application/json", must be one of ["application/json"]

            Keyword Args:
                full_workflow_request (FullWorkflowRequest): ##### FullWorkflow Request Model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FullWorkflowResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.post_full_workflow = _Endpoint(
            settings={
                'response_type': (FullWorkflowResponse,),
                'auth': [],
                'endpoint_path': '/FullWorkflow',
                'operation_id': 'post_full_workflow',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'full_workflow_request',
                ],
                'required': [
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'full_workflow_request':
                        (FullWorkflowRequest,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'full_workflow_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_full_workflow
        )

        def __post_get_doc_status(
            self,
            content_type="application/json",
            **kwargs
        ):
            """Get Document Status  # noqa: E501

            #### Used to get the status of the document ex. pending/completed/rejected.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_get_doc_status(content_type="application/json", async_req=True)
            >>> result = thread.get()

            Args:
                content_type (str): defaults to "application/json", must be one of ["application/json"]

            Keyword Args:
                get_doc_status_request (GetDocStatusRequest): ##### Get Document Status Request Model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GetDocStatusResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.post_get_doc_status = _Endpoint(
            settings={
                'response_type': (GetDocStatusResponse,),
                'auth': [],
                'endpoint_path': '/GetDocStatus',
                'operation_id': 'post_get_doc_status',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'get_doc_status_request',
                ],
                'required': [
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'get_doc_status_request':
                        (GetDocStatusRequest,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'get_doc_status_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_get_doc_status
        )

        def __post_initiate_flow(
            self,
            content_type="application/json",
            **kwargs
        ):
            """Initiate Flow  # noqa: E501

            #### Used to initiate aworkflow of a document.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_initiate_flow(content_type="application/json", async_req=True)
            >>> result = thread.get()

            Args:
                content_type (str): defaults to "application/json", must be one of ["application/json"]

            Keyword Args:
                initiate_flow_request (InitiateFlowRequest): ##### Initiate Flow Request Model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InitiateFlowResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.post_initiate_flow = _Endpoint(
            settings={
                'response_type': (InitiateFlowResponse,),
                'auth': [],
                'endpoint_path': '/InitiateFlow',
                'operation_id': 'post_initiate_flow',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'initiate_flow_request',
                ],
                'required': [
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'initiate_flow_request':
                        (InitiateFlowRequest,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'initiate_flow_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_initiate_flow
        )

        def __post_initiate_flow_no_email(
            self,
            content_type="application/json",
            **kwargs
        ):
            """Initiate Flow No Email  # noqa: E501

            #### Used to initiate a workflow without sending out emails.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_initiate_flow_no_email(content_type="application/json", async_req=True)
            >>> result = thread.get()

            Args:
                content_type (str): defaults to "application/json", must be one of ["application/json"]

            Keyword Args:
                initiate_flow_no_email_request (InitiateFlowNoEmailRequest): ##### Initiate Flow No Email Request Model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InitiateFlowNoEmailResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.post_initiate_flow_no_email = _Endpoint(
            settings={
                'response_type': (InitiateFlowNoEmailResponse,),
                'auth': [],
                'endpoint_path': '/InitiateFlow_No_Email',
                'operation_id': 'post_initiate_flow_no_email',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'initiate_flow_no_email_request',
                ],
                'required': [
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'initiate_flow_no_email_request':
                        (InitiateFlowNoEmailRequest,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'initiate_flow_no_email_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_initiate_flow_no_email
        )

        def __post_initiate_flow_no_initial_email(
            self,
            content_type="application/json",
            **kwargs
        ):
            """Initiate Flow No Initial Email  # noqa: E501

            #### Used to initiate a document workflow without an initial email being sent to the user.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_initiate_flow_no_initial_email(content_type="application/json", async_req=True)
            >>> result = thread.get()

            Args:
                content_type (str): defaults to "application/json", must be one of ["application/json"]

            Keyword Args:
                initiate_flow_no_initial_email_request (InitiateFlowNoInitialEmailRequest): ##### Initiate Flow No Initial Email Request Model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InitiateFlowNoInitialEmailResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.post_initiate_flow_no_initial_email = _Endpoint(
            settings={
                'response_type': (InitiateFlowNoInitialEmailResponse,),
                'auth': [],
                'endpoint_path': '/InitiateFlow_No_Initial_Email',
                'operation_id': 'post_initiate_flow_no_initial_email',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'initiate_flow_no_initial_email_request',
                ],
                'required': [
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'initiate_flow_no_initial_email_request':
                        (InitiateFlowNoInitialEmailRequest,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'initiate_flow_no_initial_email_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_initiate_flow_no_initial_email
        )

        def __post_workflow_sign(
            self,
            content_type="application/json",
            **kwargs
        ):
            """Workflow Sign  # noqa: E501

            #### Used to send a request to a user to sign a document workflow.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_workflow_sign(content_type="application/json", async_req=True)
            >>> result = thread.get()

            Args:
                content_type (str): defaults to "application/json", must be one of ["application/json"]

            Keyword Args:
                workflow_sign_request (WorkflowSignRequest): ##### Workflow Sign Request Model. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WorkflowSignResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.post_workflow_sign = _Endpoint(
            settings={
                'response_type': (WorkflowSignResponse,),
                'auth': [],
                'endpoint_path': '/WorkflowSign',
                'operation_id': 'post_workflow_sign',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'workflow_sign_request',
                ],
                'required': [
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'workflow_sign_request':
                        (WorkflowSignRequest,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'workflow_sign_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_workflow_sign
        )
